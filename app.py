from flask import Flask, request, render_template, jsonify
import os
import librosa
import speech_recognition as sr
import tensorflow as tf
import numpy as np
import pickle
from tensorflow.keras.preprocessing.sequence import pad_sequences
import re
import unicodedata

app = Flask(__name__)

# Load saved model and tools
model = tf.keras.models.load_model('model/best_model.h5')

with open('model/tokenizer.pkl', 'rb') as f:
    tokenizer = pickle.load(f)
    print("‚úÖ Flask tokenizer vocab size:", len(tokenizer.word_index)) #
    print("üî¢ Flask test sequence:", tokenizer.texts_to_sequences(["‡¶§‡ßã‡¶ï‡ßá ‡¶Æ‡ßá‡¶∞‡ßá ‡¶´‡ßá‡¶≤‡¶¨‡ßã"]))#


with open('model/label_encoder.pkl', 'rb') as f:
    label_encoder = pickle.load(f)

MAX_SEQUENCE_LENGTH = 100
BENGALI_STOPWORDS = set([
    "‡¶Ü‡¶Æ‡¶ø", "‡¶Ü‡¶Æ‡¶∞‡¶æ", "‡¶§‡ßÅ‡¶Æ‡¶ø", "‡¶§‡ßã‡¶Æ‡¶∞‡¶æ", "‡¶∏‡ßá", "‡¶§‡¶æ‡¶π‡¶æ‡¶∞‡¶æ", "‡¶è‡¶á", "‡¶∏‡ßá‡¶á",
    "‡¶è‡¶ñ‡¶æ‡¶®‡ßá", "‡¶∏‡ßá‡¶ñ‡¶æ‡¶®‡ßá", "‡¶ï‡¶ø", "‡¶ï‡ßá‡¶®", "‡¶ï‡¶ñ‡¶®", "‡¶ï‡¶ø‡¶≠‡¶æ‡¶¨‡ßá", "‡¶π‡¶Ø‡¶º", "‡¶®‡¶Ø‡¶º",
    "‡¶•‡ßá‡¶ï‡ßá", "‡¶ï‡¶∞‡ßá", "‡¶∏‡¶¨", "‡¶ï‡¶ø‡¶õ‡ßÅ"
])

def preprocess_bengali_text(text):
    text = text.lower()
    text = re.sub(r'[^\u0980-\u09FF\s]', '', text)
    text = ' '.join(text.split())
    text = unicodedata.normalize('NFKC', text)
    tokens = re.findall(r'[\u0980-\u09FF]+', text)
    filtered_tokens = [word for word in tokens if word not in BENGALI_STOPWORDS]
    return ' '.join(filtered_tokens)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/predict', methods=['POST'])
def predict():
    audio_file = request.files['audio']
    file_path = 'temp.wav'
    audio_file.save(file_path)

# üîÅ Convert to proper PCM WAV
#import librosa
    #import soundfile as sf

    #y, sr_rate = librosa.load(file_path, sr=None)
    #sf.write(file_path, y, sr_rate, subtype='PCM_16')
    from pydub import AudioSegment

    try:
        audio = AudioSegment.from_file(file_path)
        audio.export(file_path, format="wav", codec="pcm_s16le")
    except Exception as e:
        print("‚ö†Ô∏è Audio conversion failed:", e)

# Transcribe
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:

        audio = recognizer.record(source)
        try:
            text = recognizer.recognize_google(audio, language="bn-IN")
            print(f"Transcribed Text: {text}")
        except:
            return jsonify({'result': 'Could not transcribe'})

    preprocessed = preprocess_bengali_text(text)
    print("üßπ Preprocessed Text:", preprocessed)

    seq = tokenizer.texts_to_sequences([preprocessed])
    padded = pad_sequences(seq, maxlen=MAX_SEQUENCE_LENGTH, padding='post')
    prob = model.predict(padded)[0][0]

    # Apply prediction with a stricter threshold
    label = (prob > 0.9).astype('int32')

# Keyword-based override for playful or indirect tones
    override_keywords = [
        '‡¶ü‡ßç‡¶∞‡¶ø‡¶ü', '‡¶ü‡ßç‡¶∞‡¶ø‡¶ü‡¶ü‡¶æ', '‡¶ò‡ßÅ‡¶Æ‡¶ø‡¶Ø‡¶º‡ßá', '‡¶π‡¶æ‡¶∏‡¶õ‡¶ø', '‡¶∂‡ßá‡¶∑', '‡¶Æ‡¶ú‡¶æ', '‡¶ö‡¶≤‡ßá ‡¶Ø‡¶æ‡¶ì', '‡¶ö‡ßÅ‡¶™', '‡¶≠‡¶æ‡¶≤‡ßã',
        '‡¶ö‡¶æ‡¶á‡¶®‡¶æ', '‡¶ö‡¶æ‡¶á', '‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶ï‡ßá‡¶Æ‡¶®', '‡¶∏‡¶Æ‡¶Ø‡¶º ‡¶Ü‡¶∏‡¶≤‡ßá', '‡¶≠‡ßá‡¶¨‡ßá', '‡¶®‡¶ø‡¶ú‡ßá ‡¶•‡ßá‡¶ï‡ßá', '‡¶¶‡ßã‡¶∑', 
        '‡¶®‡¶æ ‡¶¨‡¶≤‡¶¨‡ßã', '‡¶®‡¶æ ‡¶¶‡ßá‡¶ñ‡ßá', '‡¶ö‡¶æ‡¶™', '‡¶¨‡¶æ‡¶°‡¶º‡¶æ‡¶¨‡¶æ‡¶°‡¶º‡¶ø', '‡¶Ü‡¶ó‡ßá', '‡¶§‡ßã‡¶∞ ‡¶ï‡ßç‡¶∑‡¶§‡¶ø', '‡¶ö‡ßÅ‡¶™ ‡¶ï‡¶∞‡ßá', 
        '‡¶§‡ßã‡¶∞ ‡¶ï‡¶ø‡¶®‡ßç‡¶§‡ßÅ', '‡¶Ü‡¶Æ‡¶ø ‡¶ö‡¶æ‡¶á', '‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶≠‡¶æ‡¶≤‡ßã', '‡¶®‡¶æ ‡¶ñ‡¶æ‡¶ì‡ßü‡¶æ‡¶≤‡ßá', '‡¶ñ‡¶æ‡¶∞‡¶æ‡¶™ ‡¶π‡¶¨‡ßá', '‡¶®‡¶ø‡¶ú‡ßá', 
        '‡¶®‡¶ø‡¶ú‡ßá‡¶∞ ‡¶¶‡ßã‡¶∑', '‡¶π‡ßü‡ßá ‡¶Ø‡¶æ‡¶¨‡ßá', '‡¶ñ‡ßÅ‡¶¨ ‡¶¨‡ßá‡¶∂‡¶ø', '‡¶∂‡ßÅ‡¶ß‡ßÅ ‡¶¨‡¶≤‡¶õ‡¶ø', '‡¶∞‡¶æ‡¶ó', '‡¶∞‡¶æ‡¶ó ‡¶ï‡¶∞‡ßá‡¶õ‡¶ø', '‡¶∞‡¶æ‡¶ó'
        '‡¶∞‡¶æ‡¶ó ‡¶ï‡¶∞‡¶õ‡¶ø', '‡¶∞‡ßá‡¶ó‡ßá', '‡¶∞‡ßá‡¶ó‡ßá ‡¶Ü‡¶õ‡¶ø', '‡¶∂‡ßá‡¶∑ ‡¶π‡¶Ø‡¶º‡ßá ‡¶ó‡ßá‡¶õ‡ßá', '‡¶∏‡¶¨‡¶ï‡¶ø‡¶õ‡ßÅ ‡¶∂‡ßá‡¶∑', '‡¶∏‡¶¨ ‡¶∂‡ßá‡¶∑',
        '‡¶Ü‡¶Æ‡¶ø ‡¶∂‡ßá‡¶∑ ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑', '‡¶õ‡ßá‡¶°‡¶º‡ßá ‡¶¶‡ßá‡¶¨‡ßã'
    ]

    if label == 1:
        for word in override_keywords:
            if word in preprocessed.split() and prob < 0.995:
                print(f"üîÅ Soft override: matched keyword '{word}', prob={prob:.3f}")
                label = 0
                break


    # Step 3: Hard override (false negatives ‚Üí Force Threat)
    dangerous_keywords = [
        '‡¶Æ‡¶æ‡¶∞‡ßá', '‡¶Æ‡ßá‡¶∞‡ßá', '‡¶Æ‡¶æ‡¶∞‡¶¨‡ßã', '‡¶Æ‡¶æ‡¶∞‡¶¨‡ßã', '‡¶Æ‡¶æ‡¶∞ ‡¶¶‡ßá‡¶¨‡ßã',
        '‡¶§‡ßã‡¶Æ‡¶æ‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∞‡¶¨‡ßã', '‡¶§‡ßã‡¶ï‡ßá ‡¶Æ‡¶æ‡¶∞‡¶¨‡ßã', '‡¶ñ‡¶æ‡¶¨‡¶ø', '‡¶ñ‡¶æ‡¶¨‡ßá', '‡¶ñ‡¶æ‡¶¨‡ßã',
        '‡¶´‡ßá‡¶≤‡¶¨‡ßã', '‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡ßá', '‡¶∂‡ßá‡¶∑ ‡¶ï‡¶∞‡¶¨‡ßã', '‡¶ù‡ßÅ‡¶≤‡¶ø‡¶Ø‡¶º‡ßá', '‡¶ñ‡ßÅ‡¶®', '‡¶ß‡¶∞‡¶¨‡ßã',
        '‡¶¨‡¶Å‡¶ü‡¶ø', '‡¶ó‡¶æ‡¶Ø‡¶º‡ßá ‡¶π‡¶æ‡¶§', '‡¶™‡¶ø‡¶ü‡¶ø‡¶Ø‡¶º‡ßá', '‡¶ó‡¶≤‡¶æ ‡¶ü‡¶ø‡¶™‡ßá', '‡¶ñ‡¶§‡¶Æ', '‡¶õ‡ßÅ‡¶∞‡¶ø',
        '‡¶ó‡ßÅ‡¶≤‡¶ø', '‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶¨‡ßã', '‡¶ó‡ßÅ‡¶≤‡¶ø ‡¶ï‡¶∞‡¶¨‡ßá', '‡¶π‡¶§‡ßç‡¶Ø‡¶æ'
    ]

    if label == 0 and prob < 0.3:
        for word in dangerous_keywords:
            if word in preprocessed.split():
                print(f"‚ö†Ô∏è Hard override to Threat: matched '{word}', prob={prob:.3f}")
                label = 1
                break

    result = "Threat" if label == 1 else "No Threat"

    #label = (prob > 0.5).astype('int32')
    #result = label_encoder.inverse_transform([label])[0]
    #result = "Threat" if label == 1 else "No Threat"
    print("üìà Flask Raw Probability:", prob)#
    print("üîÆ Flask Predicted Label:", result) #


    #return jsonify({'result': str(result)})
    return jsonify({'result': result})


if __name__ == '__main__':
    app.run(debug=True)
